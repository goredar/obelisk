#!/usr/bin/env ruby

lib = File.expand_path(File.dirname(__FILE__) + '/../lib')
$LOAD_PATH.unshift(lib) if File.directory?(lib) && !$LOAD_PATH.include?(lib)

require "optparse"
require "securerandom"
require "obelisk"

options = {}
VALID_COMMANDS = %w{install generate update}

op = OptionParser.new do |opts|
  opts.banner = 
      %Q{Usage: obelisk_cli [options] command
  Commands:
  install             Copy or merge configuration file for Obelisk
  generate            Generate config files for Asterisk
  update              Replace config files for Asterisk in case of any change
  Options:}
  opts.on("-o", "--outdir [DIR]", "Output directory for generated config files") { |dir| options[:dir] = dir }
  opts.on("-d", "--db", "Update Obelisk Portal database") { options[:updb] = true }
  opts.on("-r", "--restart", "Restart Asterisk in case of config change") { options[:restart] = true }
  opts.on("-c", "--config [FILE]", "Specify config FILE for Obelisk") { |file| options[:config] = file }
  opts.on_tail("-h", "--help", "Show this message") { puts opts; exit }
end

op.parse!

ARGV.select! { |arg| VALID_COMMANDS.include? arg }
(puts op.help; exit 1) if ARGV.empty?

Obelisk.load_conf options[:config]
$conf[:asterisk_conf_dir] = options[:dir] if options[:dir]

ARGV.each do |arg|
  case arg
  when "install"
    if Obelisk.save_def_conf options[:config]
      puts "Found and updated config file. Please, check it."
    else
      puts "Default configuration file's been saved. Change it accordingly."
    end
  when "generate"
    Obelisk.make_erb_conf :force => true, :restart => options[:restart]
    puts "All files has been generated."
  when "update"
    if Obelisk.make_erb_conf(:restart => options[:restart])
      puts "Asterisk config files have been updated"
    else
      puts "Already up to date."
    end
  else
    puts op
  end
end